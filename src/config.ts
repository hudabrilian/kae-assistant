import prismaClient from '#database';
import { Language } from '#lib/types/enum';
import { rootFolder } from '#lib/utils/constants';
import { LogLevel } from '@sapphire/framework';
import { InternationalizationContext } from '@sapphire/plugin-i18next';
import { envParseArray, envParseString, setup } from '@skyra/env-utilities';
import { ActivityType, ClientOptions, GatewayIntentBits, Options, Partials } from 'discord.js';
import { join } from 'path';

setup({ path: join(rootFolder, '.env') });

export const OWNERS = envParseArray('CLIENT_OWNERS');
export const DEV = envParseString('NODE_ENV');

export const CLIENT_OPTIONS: ClientOptions = {
	caseInsensitiveCommands: true,
	caseInsensitivePrefixes: true,
	loadSubcommandErrorListeners: true,
	defaultPrefix: envParseString('CLIENT_PREFIX'),
	intents: [
		GatewayIntentBits.Guilds,
		GatewayIntentBits.GuildMembers,
		GatewayIntentBits.GuildModeration,
		GatewayIntentBits.GuildEmojisAndStickers,
		GatewayIntentBits.GuildIntegrations,
		GatewayIntentBits.GuildWebhooks,
		GatewayIntentBits.GuildInvites,
		GatewayIntentBits.GuildVoiceStates,
		GatewayIntentBits.GuildPresences,
		GatewayIntentBits.GuildMessages,
		GatewayIntentBits.GuildMessageReactions,
		GatewayIntentBits.MessageContent,
		GatewayIntentBits.GuildScheduledEvents,
		GatewayIntentBits.AutoModerationConfiguration,
		GatewayIntentBits.AutoModerationExecution
	],
	loadDefaultErrorListeners: false,
	makeCache: Options.cacheEverything(),
	partials: [Partials.Channel, Partials.GuildMember, Partials.GuildScheduledEvent, Partials.Message, Partials.Reaction, Partials.User],
	presence: {
		activities: [
			{
				name: 'kae command',
				type: ActivityType.Watching
			}
		]
	},
	logger: {
		level: DEV === 'production' ? LogLevel.Info : LogLevel.Debug
	},
	loadMessageCommandListeners: true,
	shards: 'auto',
	loadApplicationCommandRegistriesStatusListeners: true,
	subcommandsAdvanced: {
		nameCommandsAutogenerated: true
	},
	i18n: {
		fetchLanguage: async (context: InternationalizationContext): Promise<Language> => {
			if (!context.guild) {
				return Language.en_US;
			}

			const guild = await prismaClient.guild.findUnique({
				where: {
					guildId: context.guild.id
				}
			});

			return guild?.language ? Language[guild.language] : Language.en_US;
		}
	}
};
