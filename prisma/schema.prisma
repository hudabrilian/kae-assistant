// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique

  level UserLevel[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserLevel {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  guild Guild @relation(fields: [guildId], references: [id])
  guildId String @db.ObjectId

  xp Int @default(0)
  level Int @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Guild {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  guildId String @unique
  prefix String?

  language LanguageTag? @default(en_US)

  embeds Embed[]
  fields Field[]

  greetings Greeting[]
  guildVerify GuildVerify?

  guildLevel GuildLevel?
  usersLevel UserLevel[]

  reactionRoles ReactionRole[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GuildLevel {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  guild Guild @relation(fields: [guildId], references: [id])
  guildId String @db.ObjectId @unique

  status Boolean @default(false)

  levelRole GuildLevelRole[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GuildLevelRole {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  guild GuildLevel @relation(fields: [guildId], references: [id])
  guildId String @db.ObjectId

  role String
  level Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Embed {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  guild Guild @relation(fields: [guildId], references: [id])
  guildId String @db.ObjectId

  title String?
  url String?
  author String?
  authorIconURL String?
  authorURL String?
  description String?
  color String?
  footer String?
  footerIconURL String?
  thumbnail String?
  image String?
  timestamp Boolean?

  fields Field[] @relation(fields: [fieldIds], references: [id])
  fieldIds String[] @db.ObjectId

  welcomeGreetings Greeting[] @relation("welcomeGreetings")
  leaveGreetings Greeting[] @relation("leaveGreetings")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Field {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  guild Guild @relation(fields: [guildId], references: [id])
  guildId String @db.ObjectId

  nameField String
  name String
  value String
  inline Boolean?

  embeds Embed[] @relation(fields: [embedIds], references: [id])
  embedIds String[] @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Greeting {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  enabled Boolean @default(false)

  guild Guild @relation(fields: [guildId], references: [id])
  guildId String @db.ObjectId

  welcomeChannel String?
  leaveChannel String?

  welcomeEmbed Embed? @relation("welcomeGreetings", fields: [welcomeEmbedId], references: [id])
  welcomeEmbedId String? @db.ObjectId
  leaveEmbed Embed? @relation("leaveGreetings", fields: [leaveEmbedId], references: [id])
  leaveEmbedId String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GuildVerify {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  guild Guild @relation(fields: [guildId], references: [id])
  guildId String @db.ObjectId @unique

  role String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReactionRole {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  guild Guild @relation(fields: [guildId], references: [id])
  guildId String @db.ObjectId

  role String
  emoji String

  message String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LanguageTag {
  en_US
  id_ID
}